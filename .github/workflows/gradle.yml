# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-west-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: chrisp1985_ecr_docker_repo         # set this to your Amazon ECR repository name
  ECR_REPOSITORY_URI: 195571588534.dkr.ecr.eu-west-2.amazonaws.com/chrisp1985_ecr_docker_repo
  IMAGE_NAME: employee-service-docker-image           # set this to the name of the container in the
  # containerDefinitions section of your task definition
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build_and_deploy:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'


      # Build the Spring API image.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test dockerBuildImage
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Build Docker image
#        run: |
#          docker buildx build \
#            --platform linux/amd64,linux/arm64 \
#            --tag $ECR_REPOSITORY_URI:latest \
#            .
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: chrisp1985_ecr_docker_repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    

#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: chrisp1985_ecr_docker_repo
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          # Build a docker container and
#          # push it to ECR so that it can
#          # be deployed to ECS.
#          docker push employee-service-docker-image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


#      # Build the docker image.
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-west-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: chrisp1985_ecr_docker_repo
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          # Build a docker container and
#          # push it to ECR so that it can
#          # be deployed to ECS.
#          docker push employee-service-docker-image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#      - name: Deploy to AWS App Runner
#        run: aws apprunner start-deployment --service-arn "your-service-arn" --image-arn "${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}:latest" --source-configuration "imageRepositoryType=ECR,imageIdentifier=${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}:latest"
#
#      - name: Check deployment status
#        run: aws apprunner describe-service --service-arn "your-service-arn" --query "service.status" > status.txt
#
#      - name: Deployment status
#        run: cat status.txt

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0